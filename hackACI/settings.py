"""
Django settings for hackACI project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv, find_dotenv
from django.core.management.utils import get_random_secret_key
import os
import logging

#load the variables from the .env file 
load_dotenv(find_dotenv())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
secretKeyEnv = os.getenv("SECRET_KEY")
if secretKeyEnv:
    SECRET_KEY = secretKeyEnv 
else:
    SECRET_KEY = get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
debugEnv = os.getenv("DEBUG")

DEBUG = True
if debugEnv:
    if debugEnv.lower() == "true":
        DEBUG = True
    elif debugEnv.lower() == "false":
        DEBUG = False
else:
    logging.warn("DEBUG value has not been set in an .env file!")
    logging.warn("DEBUG has been set to True as default.")
    logging.warn("DONT USE IN PRODUCTION when DEBUG=True, insecure!")
    DEBUG = True

secureSslRedirectEnv = os.getenv("SECURE_SSL_REDIRECT")
if secureSslRedirectEnv:
    if secureSslRedirectEnv.lower() == "true":
        SECURE_SSL_REDIRECT = True
    elif secureSslRedirectEnv.lower() == "false":
        SECURE_SSL_REDIRECT = False
else:
    logging.warn("SECURE_SSL_REDIRECT has not been set in an .env file!")
    logging.warn("SECURE_SSL_REDIRECT has been set to False as default.")
    SECURE_SSL_REDIRECT = False


ALLOWED_HOSTS = ["*"]

if not DEBUG and ALLOWED_HOSTS == "*":
    raise ValueError("ALLOWED_HOSTS cannot be '*' in production!")

# Application definition

INSTALLED_APPS = [
    'src',
    'rest_framework',
    'rest_framework.authtoken',
    'markdownify',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# expires on browser close
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# session age, 1h
SESSION_COOKIE_AGE = 3600
# httpOnly and Secure cookies, no CSRF
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hackACI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hackACI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if os.getenv("ENABLE_POSTGRESQL", "False").lower() == "true":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': BASE_DIR / os.getenv("DB_NAME", "mydb"),
            'USER': os.getenv("DB_USER", 'myuser'),
            'PASSWORD': os.getenv("DB_PASSWORD", 'mypassword'),
            'HOST': os.getenv("DB_HOST", 'localhost'),
            'PORT': os.getenv("DB_PORT",'5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static/')
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuration to make Markdownify Run.
MARKDOWNIFY = {
    "default": {
        "WHITELIST_TAGS": [
            'a', 'p', 'b', 'i', 'em', 'strong', 'ul', 'li', 'ol', 'code', 'pre',
            'blockquote', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'br'
        ],
        "WHITELIST_ATTRS": ['href', 'src', 'alt'],
        "WHITELIST_PROTOCOLS": ['http', 'https'],
    }
}
